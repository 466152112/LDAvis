% Generated by roxygen2 (4.0.0): do not edit by hand
\name{createJSON}
\alias{createJSON}
\title{Create the JSON object to read into the javascript visualization}
\usage{
createJSON(K = integer(), phi = matrix(), term.frequency = integer(),
  vocab = character(), topic.proportion = numeric(), n.terms = 30,
  dist.measure = "JS")
}
\arguments{
  \item{K}{integer, number of topics in the fitted LDA
  model}

  \item{phi}{matrix, term-topic distributions, where there
  are as many rows as terms in the vocabulary, and K
  columns, one per topic.}

  \item{term.frequency}{numeric, the frequency of each term
  in the vocabulary, which can contain non-integer values
  as a result of smoothing via priors.}

  \item{vocab}{character vector of the terms in the
  vocabulary (in the same order as the rows of \code{phi})}

  \item{topic.proportion}{numeric, the proportion of tokens
  generated from each topic across the corpus, with length
  equal to K.}

  \item{n.terms}{integer, the number of terms to display in
  the barcharts of the interactive viz. Default is 30.
  Recommended to be between 10 and 50.}

  \item{dist.measure}{the measure used to determine the
  distance between topics. Curent options are "JS" for
  Jensen-Shannon divergence and "KL" for symmetric
  Kullback-Leibler divergence.}
}
\value{
an JSON object in R that can be written to a file to feed
the interactive visualization
}
\description{
This function creates the JSON object that feeds the
javascript visualization that is currently stored in
'path-to-LDAvis/LDAvis/inst/html/'
}
\examples{
# This example uses Newsgroup documents from
# http://qwone.com/~jason/20Newsgroups/

data("Newsgroupdata", package = "LDAvis")

# Check the inputs and sort topics by frequency:
z <- check.inputs(K=50, W=22524, phi=Newsgroupdata$phi,
                  term.frequency=Newsgroupdata$term.frequency,
                  vocab=Newsgroupdata$vocab,
                  topic.proportion=Newsgroupdata$topic.proportion)

# Note that the topics have been re-ordered by check.inputs
with(Newsgroupdata, colnames(phi))
with(z, colnames(phi))
# So has topic.proportion
with(Newsgroupdata, order(topic.proportion))
with(z, order(topic.proportion))

# Relabel topics so that topic "1" has highest topic proportion.
colnames(z$phi) <- seq_len(z$K)
\dontrun{
# Takes 1-2 minutes to set up the data:
json <- with(z, createJSON(K=K, phi=phi,
                 term.frequency=term.frequency, vocab=vocab,
                 topic.proportion=topic.proportion, n.terms=30))

 # Open vis in a browser!
 serVis(json)
 # By default serVis uses a temporary directory
 # Instead, we could write files to current working directory
 serVis(json, out.dir = '.', open.browser = FALSE)
 # If you have a GitHub account and want to quickly share with others!
 serVis(json, as.gist = TRUE)
}
}
\seealso{
\link{serVis}
}

